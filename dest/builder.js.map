{"version":3,"sources":["../src/builder.js"],"names":["makeWhere","conditions","conds","key","Date","op","push","escapeId","console","warn","escape","makeField","fieldString","chunk","toSql","replace","test","chs","split","Builder","options","connect","_tableName","_type","_join","_where","_limit","_sql","_order","_group","_having","_fields","_insert","_update","name","join","limit","offset","table","field1","operator","field2","Error","fields","orders","field","order","toLocaleLowerCase","trim","arr","Array","isArray","map","e","args","params","arguments","i","length","data","Object","keys","values","value","item","items","Promise","resolve","reject","sql","toString","log","process","env","NODE_ENV","query","err","result","select","attr","where","leftJoin","group","having","apply","groupBy","orderBy","bind","exec","isReload","sqls","filter","TypeError","builder","txt","hasOwnProperty","opts","findAll","call"],"mappings":"AAAA;;;;;;;;;;;;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,SAAT,GAAqC;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;;AACnC,MAAIC,QAAQ,EAAZ;AACA,OAAK,IAAIC,GAAT,IAAgBF,UAAhB,EAA4B;AAC1B,QAAI,QAAOA,WAAWE,GAAX,CAAP,MAA2B,QAA3B,IAAuC,EAAEF,WAAWE,GAAX,aAA2BC,IAA7B,CAA3C,EAA+E;AAC7E,WAAK,IAAIC,EAAT,IAAeJ,WAAWE,GAAX,CAAf,EAAgC;;AAE9B,YAAI,OAAO,oBAAUE,EAAV,CAAP,KAAyB,UAA7B,EAAyC;AACvCH,gBAAMI,IAAN,CAAc,oBAAUC,QAAV,CAAmBJ,GAAnB,CAAd,SAAyC,oBAAUE,EAAV,EAAcJ,WAAWE,GAAX,EAAgBE,EAAhB,CAAd,CAAzC;AACD,SAFD,MAEO;AACLG,kBAAQC,IAAR,QAAkBJ,EAAlB;AACD;AACF;AACF,KATD,MASO;AACLH,YAAMI,IAAN,CAAc,oBAAUC,QAAV,CAAmBJ,GAAnB,CAAd,WAA2C,oBAAUO,MAAV,CAAiBT,WAAWE,GAAX,CAAjB,CAA3C;AACD;AACF;AACD,SAAOD,KAAP;AACD;;AAED,SAASS,SAAT,CAAoBC,WAApB,EAAiC;AAC/B,MAAIC,QAAQD,WAAZ;AACA,MAAI,QAAOC,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6B,OAAOA,MAAMC,KAAb,KAAuB,UAAxD,EAAoE;AAClE,WAAOD,MAAMC,KAAN,EAAP;AACD;AACD;AACAD,UAAQA,MAAME,OAAN,CAAc,YAAd,EAA4B,EAA5B,CAAR;AACA;AACA,MAAI,eAAeC,IAAf,CAAoBH,KAApB,CAAJ,EAAgC;AAC9B,QAAII,MAAMJ,MAAMK,KAAN,CAAY,QAAZ,CAAV;AACA,WAAOP,UAAUM,IAAI,CAAJ,CAAV,IAAoB,MAApB,GAA6B,oBAAUV,QAAV,CAAmBU,IAAI,CAAJ,CAAnB,CAApC;AACD;;AAED;AACA,MAAI,WAAWD,IAAX,CAAgBH,KAAhB,CAAJ,EAA4B;AAC1B,QAAII,OAAMJ,MAAMK,KAAN,CAAY,GAAZ,CAAV;AACA,WAAO,oBAAUX,QAAV,CAAmBU,KAAI,CAAJ,CAAnB,IAA6B,GAA7B,GAAmC,oBAAUV,QAAV,CAAmBU,KAAI,CAAJ,CAAnB,CAA1C;AACD;AACD;AACA,SAAO,oBAAUV,QAAV,CAAmBM,KAAnB,CAAP;AACD;;IAEoBM,O,WA6ClB,qB,UAKA,qB,UAMA,qB,UAQA,qB,UAQA,qB,UAQA,qB,UAYA,qB,UAOA,qB,UAOA,qB,WAyBA,qB,WAoBA,qB,WAaA,qB;AAlKD,qBAA2B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACzB,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;;AAEA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACD;;;;0BA6BMC,I,EAAoB;AAAA,UAAdd,OAAc,uEAAJ,EAAI;;AACzB,WAAKE,UAAL,GAAkB,oBAAUf,QAAV,CAAmB2B,IAAnB,CAAlB;AACD;;;4BAGuB;AAAA,UAAjBjC,UAAiB,uEAAJ,EAAI;;AACtB,UAAIC,QAAQF,UAAUC,UAAV,CAAZ;AACA,WAAKwB,MAAL,GAAc,WAAWvB,MAAMiC,IAAN,CAAW,OAAX,CAAzB;AACD;;;4BAG6B;AAAA,UAAvBC,MAAuB,uEAAf,CAAe;;AAAA,UAAZC,MAAY,uEAAH,CAAG;;AAC5B,WAAKX,MAAL,cAAuBU,MAAvB;AACA,UAAIC,MAAJ,EAAY;AACV,aAAKX,MAAL,iBAA0BW,MAA1B;AACD;AACF;;;yBAGKC,K,EAAOC,M,EAAQC,Q,EAAUC,M,EAAQ;AACrC,UAAI,CAACH,KAAD,IAAU,CAACG,MAAf,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,WAAKlB,KAAL,cAAsBb,UAAU2B,KAAV,CAAtB,YAA6C3B,UAAU4B,MAAV,CAA7C,SAAkEC,QAAlE,SAA8E7B,UAAU8B,MAAV,CAA9E;AACD;;;6BAGSH,K,EAAOC,M,EAAQC,Q,EAAUC,M,EAAQ;AACzC,UAAI,CAACH,KAAD,IAAU,CAACG,MAAf,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,WAAKlB,KAAL,mBAA2Bb,UAAU2B,KAAV,CAA3B,YAAkD3B,UAAU4B,MAAV,CAAlD,SAAuEC,QAAvE,SAAmF7B,UAAU8B,MAAV,CAAnF;AACD;;;4BAGQE,M,EAAQ;AACf,UAAI,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC,MAAM,IAAID,KAAJ,CAAU,kCAAV,CAAN;AAChC,UAAIE,SAAS,EAAb;AACA,WAAK,IAAIC,KAAT,IAAkBF,MAAlB,EAA0B;AACxB,YAAIG,QAAQH,OAAOE,KAAP,EAAcE,iBAAd,GAAkCC,IAAlC,OAA6C,MAA7C,GAAsD,MAAtD,GAA+D,KAA3E;AACAJ,eAAOtC,IAAP,CAAe,oBAAUC,QAAV,CAAmBsC,KAAnB,CAAf,SAA4CC,KAA5C;AACD;;AAED,WAAKlB,MAAL,GAAc,cAAcgB,OAAOT,IAAP,CAAY,IAAZ,CAA5B;AACD;;;4BAGQc,G,EAAK;AACZ,UAAI,CAACC,MAAMC,OAAN,CAAcF,GAAd,CAAL,EAAyB,MAAM,IAAIP,KAAJ,CAAU,iCAAV,CAAN;;AAEzB,WAAKb,MAAL,iBAA0BoB,IAAIG,GAAJ,CAAQ;AAAA,eAAK,oBAAU7C,QAAV,CAAmB8C,CAAnB,CAAL;AAAA,OAAR,EAAoClB,IAApC,CAAyC,IAAzC,CAA1B;AACD;;;6BAGwB;AAAA,UAAjBlC,UAAiB,uEAAJ,EAAI;;AACvB,UAAIC,QAAQF,UAAUC,UAAV,CAAZ;;AAEA,WAAK6B,OAAL,GAAe,YAAY5B,MAAMiC,IAAN,CAAW,OAAX,CAA3B;AACD;;;2BAGOmB,I,EAAM;AACZ,UAAIC,SAAS,EAAb;AACA,UAAIL,MAAMC,OAAN,CAAcK,UAAU,CAAV,CAAd,CAAJ,EAAiC;AAC/BD,iBAASC,UAAU,CAAV,CAAT;AACD,OAFD,MAEO,IAAI,OAAOA,UAAU,CAAV,CAAP,KAAwB,QAA5B,EAAsC;AAC3CD,iBAAS,EAAT;AACA,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,UAAUE,MAA9B,EAAsCD,GAAtC,EAA2C;AACzCF,iBAAOjD,IAAP,CAAYkD,UAAUC,CAAV,CAAZ;AACD;AACF;AACD,UAAI,CAACH,IAAL,EAAWC,SAAS,CAAC,GAAD,CAAT;;AAEX,UAAIZ,SAAS,EAAb;AACA,UAAIY,MAAJ,EAAY;AACVZ,iBAASY,OAAOH,GAAP,CAAW,iBAAS;AAC3B,iBAAOzC,UAAUkC,KAAV,CAAP;AACD,SAFQ,EAENV,IAFM,CAED,IAFC,CAAT;AAGD,OAJD,MAIO;AACLQ,iBAAS,GAAT;AACD;AACD,WAAKZ,OAAL,GAAeY,MAAf;AACA,WAAKpB,KAAL;AACD;;;2BAGO0B,G,EAAK;AACX,UAAI,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B,MAAM,IAAIP,KAAJ,CAAU,2CAAV,CAAN;AAC7B,UAAIiB,OAAOV,GAAX;AACA,UAAI,CAACC,MAAMC,OAAN,CAAcF,GAAd,CAAL,EAAyB;AACvBU,eAAO,CAACV,GAAD,CAAP;AACD;AACD,UAAIN,SAASiB,OAAOC,IAAP,CAAYF,KAAK,CAAL,CAAZ,CAAb;AACA,UAAIG,SAASH,KAAKP,GAAL,CAAS,gBAAQ;AAC5B,YAAIW,QAAQ,EAAZ;AACA,aAAK,IAAIN,CAAT,IAAcd,MAAd,EAAsB;AACpBoB,gBAAMzD,IAAN,CAAW,oBAAUI,MAAV,CAAiBsD,KAAKrB,OAAOc,CAAP,CAAL,CAAjB,CAAX;AACD;AACD,qBAAWM,MAAM5B,IAAN,CAAW,IAAX,CAAX;AACD,OANY,EAMVA,IANU,CAML,IANK,CAAb;;AAQA,WAAKH,OAAL,SAAmBW,OAAOS,GAAP,CAAW;AAAA,eAAK,oBAAU7C,QAAV,CAAmB8C,CAAnB,CAAL;AAAA,OAAX,EAAuClB,IAAvC,CAA4C,IAA5C,CAAnB,gBAA+E2B,MAA/E;AACA,WAAKvC,KAAL,GAAa,QAAb;AACD;;;2BAGOoC,I,EAAM;AACZ,UAAI,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B,MAAM,IAAIjB,KAAJ,CAAU,kCAAV,CAAN;AAC9B,UAAIuB,QAAQ,EAAZ;;AAEA,WAAK,IAAI9D,GAAT,IAAgBwD,IAAhB,EAAsB;AACpBM,cAAM3D,IAAN,CAAc,oBAAUC,QAAV,CAAmBJ,GAAnB,CAAd,WAA2C,oBAAUO,MAAV,CAAiBiD,KAAKxD,GAAL,CAAjB,CAA3C;AACD;;AAED,WAAK8B,OAAL,YAAsBgC,MAAM9B,IAAN,CAAW,IAAX,CAAtB;AACA,WAAKZ,KAAL,GAAa,QAAb;AACD;;;8BAGS;AACR,WAAKA,KAAL,GAAa,QAAb;AACD;;;2BAEO;AAAA;;AACN,UAAI,CAAC,KAAKF,OAAV,EAAmB;AACjB,cAAM,IAAIqB,KAAJ,CAAU,sBAAV,CAAN;AACD;AACD,aAAO,IAAIwB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,MAAM,MAAKC,QAAL,EAAV;AACA;AACA,YAAInD,QAAQoD,GAAZ,EAAiB;AACfpD,kBAAQoD,GAAR,CAAYF,GAAZ;AACD,SAFD,MAEO;AACLG,kBAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyClE,QAAQ+D,GAAR,CAAY,QAAZ,EAAsBF,GAAtB,CAAzC;AACD;AACD,cAAKhD,OAAL,CAAasD,KAAb,CAAmBN,GAAnB,EAAwB,UAACO,GAAD,EAAMC,MAAN,EAAclC,MAAd,EAAyB;AAC/C,cAAIiC,GAAJ,EAAS;AACPR,mBAAOQ,GAAP;AACD,WAFD,MAEO;AACLT,oBAAQU,MAAR,EAAgBlC,MAAhB;AACD;AACD;AACD,SAPD;AAQD,OAhBM,CAAP;AAiBD;;;4BAEQ1C,U,EAAY;AACnB,UAAI,CAACA,UAAL,EAAiB;AACf,aAAK6E,MAAL;AACA7E,qBAAa,EAAb;AACD;AAJkB,wBAKsDA,UALtD;AAAA,UAKd8E,IALc,eAKdA,IALc;AAAA,UAKRC,KALQ,eAKRA,KALQ;AAAA,UAKD7C,IALC,eAKDA,IALC;AAAA,UAKK8C,QALL,eAKKA,QALL;AAAA,UAKeC,KALf,eAKeA,KALf;AAAA,UAKsBpC,KALtB,eAKsBA,KALtB;AAAA,UAK6BqC,MAL7B,eAK6BA,MAL7B;AAAA,UAKqC/C,KALrC,eAKqCA,KALrC;AAAA,UAK4CC,MAL5C,eAK4CA,MAL5C;;;AAOnB,UAAI0C,IAAJ,EAAU,KAAKD,MAAL,CAAYM,KAAZ,CAAkB,IAAlB,EAAwBL,IAAxB;AACV,UAAIC,KAAJ,EAAW,KAAKA,KAAL,CAAWA,KAAX;AACX,UAAI7C,IAAJ,EAAU,KAAKA,IAAL,CAAUiD,KAAV,CAAgB,IAAhB,EAAsBjD,IAAtB;AACV,UAAI8C,QAAJ,EAAc,KAAKA,QAAL,CAAcG,KAAd,CAAoB,IAApB,EAA0BH,QAA1B;AACd,UAAIC,KAAJ,EAAW,KAAKG,OAAL,CAAaH,KAAb;AACX,UAAIpC,KAAJ,EAAW,KAAKwC,OAAL,CAAaxC,KAAb;AACX,UAAIqC,MAAJ,EAAY,KAAKA,MAAL,CAAYA,MAAZ;AACZ,UAAI,OAAO/C,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAKA,KAAL,CAAWA,KAAX,EAAkBC,MAAlB;AACD;;AAED,aAAO;AACLiC,kBAAU,KAAKA,QAAL,CAAciB,IAAd,CAAmB,IAAnB,EAAyB/B,SAAzB,CADL;AAELgC,cAAM,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,EAAqB/B,SAArB;AAFD,OAAP;AAID;;;8BASU,CAAE;;;6BAEHiC,Q,EAAU;AAClB,UAAI,KAAK9D,IAAL,IAAa8D,QAAjB,EAA2B,OAAO,KAAK9D,IAAZ;;AAE3B,UAAI+D,OAAO,EAAX;AACA,cAAQ,KAAKnE,KAAb;AACE,aAAK,QAAL;AACEmE,iBAAO,aACK,KAAK3D,OADV,YAEL,KAAKT,UAFA,EAGL,KAAKE,KAHA,EAIL,KAAKC,MAJA,EAKL,KAAKI,MALA,EAML,KAAKC,OANA,EAOL,KAAKF,MAPA,EAQL,KAAKF,MARA,CAAP;AAUA;AACF,aAAK,QAAL;AACEgE,iBAAO,gBAEL,KAAKpE,UAFA,EAGL,KAAKU,OAHA,CAAP;AAKA;AACF,aAAK,QAAL;AACE0D,iBAAO,CACL,aADK,EAEL,KAAKpE,UAFA,EAGL,KAAKG,MAHA,CAAP;AAKA;AACF,aAAK,QAAL;AACEiE,iBAAO,CACL,QADK,EAEL,KAAKpE,UAFA,EAGL,KAAKW,OAHA,EAIL,KAAKR,MAJA,CAAP;AAMA;AAlCJ;AAoCA,aAAOiE,KAAKC,MAAL,CAAY;AAAA,eAAK,CAAC,CAACtC,CAAP;AAAA,OAAZ,EAAsBlB,IAAtB,CAA2B,GAA3B,CAAP;AACD;;;wBAxPWkC,G,EAAK;AACf,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,cAAM,IAAIuB,SAAJ,CAAc,+BAAd,CAAN;AACD;AACD,aAAO;AACL9E,aADK,mBACI;AAAC,iBAAOuD,GAAP;AAAW;AADhB,OAAP;AAGD;;;0BACanC,I,EAAoB;AAAA,UAAdd,OAAc,uEAAJ,EAAI;;AAChC,UAAI,CAACc,IAAL,EAAW,MAAM,IAAIQ,KAAJ,CAAU,0BAAV,CAAN;;AAEX,UAAImD,UAAU,IAAI1E,OAAJ,YAAae,UAAb,IAAsBd,OAAtB,EAAd;AACAyE,cAAQvE,UAAR,GAAqBY,IAArB;;AAEA,aAAO2D,OAAP;AACD;;;0BAEaxB,G,EAAKd,M,EAAQ;AACzB,UAAI,CAACA,MAAL,EAAa,OAAOc,GAAP;AACb,aAAOA,IAAItD,OAAJ,CAAY,UAAZ,EAAwB,UAAU+E,GAAV,EAAe3F,GAAf,EAAoB;AACjD,YAAIoD,OAAOwC,cAAP,CAAsB5F,GAAtB,CAAJ,EAAgC;AAC9B,iBAAO,oBAAUO,MAAV,CAAiB6C,OAAOpD,GAAP,CAAjB,CAAP;AACD;AACD,eAAO2F,GAAP;AACD,OALM,CAAP;AAMD;;;8BA6K6B;AAAA,UAAd1E,OAAc,uEAAJ,EAAI;;AAC5B,UAAI,CAACA,QAAQkB,KAAb,EAAoB,MAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;AACpB,UAAIsD,OAAO,EAAC3E,SAASD,QAAQC,OAAlB,EAAX;AACA,UAAIiB,QAAQnB,QAAQmB,KAAR,CAAclB,QAAQkB,KAAtB,EAA6B0D,IAA7B,CAAZ;AACA,aAAO1D,MAAM2D,OAAN,CAAcC,IAAd,CAAmB5D,KAAnB,EAA0BlB,OAA1B,CAAP;AACD;;;;;kBA7NkBD,O","file":"builder.js","sourcesContent":["'use strict'\r\nimport SqlString from 'sqlstring'\r\nimport {cb, test} from './utils/decorators'\r\nimport operators from './utils/operators'\r\n\r\nfunction makeWhere (conditions = {}) {\r\n  let conds = []\r\n  for (let key in conditions) {\r\n    if (typeof conditions[key] === 'object' && !(conditions[key] instanceof Date)) {\r\n      for (let op in conditions[key]) {\r\n\r\n        if (typeof operators[op] === 'function') {\r\n          conds.push(`${SqlString.escapeId(key)} ${operators[op](conditions[key][op])}`)\r\n        } else {\r\n          console.warn(`\\'${op}\\' operator symbol is not defined.`)\r\n        }\r\n      }\r\n    } else {\r\n      conds.push(`${SqlString.escapeId(key)} = ${SqlString.escape(conditions[key])}`)\r\n    }\r\n  }\r\n  return conds\r\n}\r\n\r\nfunction makeField (fieldString) {\r\n  let chunk = fieldString\r\n  if (typeof chunk === 'object' && typeof chunk.toSql === 'function') {\r\n    return chunk.toSql()\r\n  }\r\n  // 去掉两边空格\r\n  chunk = chunk.replace(/^\\s*|\\s*$/g, '')\r\n  // users.name as test\r\n  if (/\\w+ +as +\\w+/.test(chunk)) {\r\n    let chs = chunk.split(/ +as +/)\r\n    return makeField(chs[0]) + ' as ' + SqlString.escapeId(chs[1])\r\n  }\r\n\r\n  // users.name\r\n  if (/\\w+\\.\\w+/.test(chunk)) {\r\n    let chs = chunk.split('.')\r\n    return SqlString.escapeId(chs[0]) + '.' + SqlString.escapeId(chs[1])\r\n  }\r\n  // name\r\n  return SqlString.escapeId(chunk)\r\n}\r\n\r\nexport default class Builder {\r\n\r\n  constructor (options = {}) {\r\n    this.connect = options.connect\r\n\r\n    this._tableName = ''\r\n    this._type = ''\r\n    this._join = ''\r\n    this._where = ''\r\n    this._limit = ''\r\n    this._sql = ''\r\n    this._order = ''\r\n    this._group = ''\r\n    this._having = ''\r\n    this._fields = ''\r\n    this._insert = ''\r\n    this._update = ''\r\n  }\r\n  static raw (sql) {\r\n    if (typeof sql !== 'string') {\r\n      throw new TypeError('argument sql must be a string');\r\n    }\r\n    return {\r\n      toSql () {return sql}\r\n    }\r\n  }\r\n  static table (name, options = {}) {\r\n    if (!name) throw new Error('Table name is not found.')\r\n\r\n    let builder = new Builder({name, ...options})\r\n    builder._tableName = name\r\n\r\n    return builder\r\n  }\r\n\r\n  static query (sql, params) {\r\n    if (!params) return sql\r\n    return sql.replace(/\\:(\\w+)/g, function (txt, key) {\r\n      if (params.hasOwnProperty(key)) {\r\n        return SqlString.escape(params[key])\r\n      }\r\n      return txt\r\n    })\r\n  }\r\n\r\n  @cb()\r\n  table (name, options = {}) {\r\n    this._tableName = SqlString.escapeId(name)\r\n  }\r\n\r\n  @cb()\r\n  where (conditions = {}) {\r\n    let conds = makeWhere(conditions)\r\n    this._where = 'where ' + conds.join(' and ')\r\n  }\r\n\r\n  @cb()\r\n  limit (limit = 1, offset = 0) {\r\n    this._limit = `limit ${limit}`\r\n    if (offset) {\r\n      this._limit += ` offset ${offset}`\r\n    }\r\n  }\r\n\r\n  @cb()\r\n  join (table, field1, operator, field2) {\r\n    if (!table || !field2) {\r\n      throw new Error('the arguments error')\r\n    }\r\n    this._join += `join ${makeField(table)} on ${makeField(field1)} ${operator} ${makeField(field2)} `\r\n  }\r\n\r\n  @cb()\r\n  leftJoin (table, field1, operator, field2) {\r\n    if (!table || !field2) {\r\n      throw new Error('the arguments error')\r\n    }\r\n    this._join += `left join ${makeField(table)} on ${makeField(field1)} ${operator} ${makeField(field2)} `\r\n  }\r\n\r\n  @cb()\r\n  orderBy (fields) {\r\n    if (typeof fields !== 'object') throw new Error('The arguments must be an object.')\r\n    let orders = []\r\n    for (let field in fields) {\r\n      let order = fields[field].toLocaleLowerCase().trim() === 'desc' ? 'desc' : 'asc'\r\n      orders.push(`${SqlString.escapeId(field)} ${order}`)\r\n    }\r\n\r\n    this._order = 'order by ' + orders.join(', ')\r\n  }\r\n\r\n  @cb()\r\n  groupBy (arr) {\r\n    if (!Array.isArray(arr)) throw new Error('The arguments must be an array.')\r\n\r\n    this._group = `group by ${arr.map(e => SqlString.escapeId(e)).join(', ')}`\r\n  }\r\n\r\n  @cb()\r\n  having (conditions = {}) {\r\n    let conds = makeWhere(conditions)\r\n\r\n    this._having = 'having ' + conds.join(' and ')\r\n  }\r\n\r\n  @cb()\r\n  select (args) {\r\n    let params = []\r\n    if (Array.isArray(arguments[0])) {\r\n      params = arguments[0]\r\n    } else if (typeof arguments[0] === 'string') {\r\n      params = []\r\n      for (let i = 0; i < arguments.length; i++) {\r\n        params.push(arguments[i])\r\n      }\r\n    }\r\n    if (!args) params = ['*']\r\n\r\n    let fields = ''\r\n    if (params) {\r\n      fields = params.map(field => {\r\n        return makeField(field)\r\n      }).join(', ')\r\n    } else {\r\n      fields = '*'\r\n    }\r\n    this._fields = fields\r\n    this._type = `select`\r\n  }\r\n\r\n  @cb()\r\n  insert (arr) {\r\n    if (typeof arr !== 'object') throw new Error('The arguments must be an array or object.')\r\n    let data = arr\r\n    if (!Array.isArray(arr)) {\r\n      data = [arr]\r\n    }\r\n    let fields = Object.keys(data[0])\r\n    let values = data.map(item => {\r\n      let value = []\r\n      for (let i in fields) {\r\n        value.push(SqlString.escape(item[fields[i]]))\r\n      }\r\n      return `(${value.join(', ')})`\r\n    }).join(', ')\r\n\r\n    this._insert = `(${fields.map(e => SqlString.escapeId(e)).join(', ')}) values${values}`\r\n    this._type = 'insert'\r\n  }\r\n\r\n  @cb()\r\n  update (data) {\r\n    if (typeof data !== 'object') throw new Error('The arguments must be an object.')\r\n    let items = []\r\n\r\n    for (let key in data) {\r\n      items.push(`${SqlString.escapeId(key)} = ${SqlString.escape(data[key])}`)\r\n    }\r\n\r\n    this._update = `set ${items.join(', ')}`\r\n    this._type = 'update'\r\n  }\r\n\r\n  @cb()\r\n  delete () {\r\n    this._type = 'delete'\r\n  }\r\n\r\n  exec () {\r\n    if (!this.connect) {\r\n      throw new Error('Connect is undefined')\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      let sql = this.toString()\r\n      // console.log(sql)\r\n      if (Builder.log) {\r\n        Builder.log(sql)\r\n      } else {\r\n        process.env.NODE_ENV !== 'production' && console.log('[sql]:', sql)\r\n      }\r\n      this.connect.query(sql, (err, result, fields) => {\r\n        if (err) {\r\n          reject(err)\r\n        } else {\r\n          resolve(result, fields)\r\n        }\r\n        // this.connect.destroy()\r\n      })\r\n    })\r\n  }\r\n\r\n  findAll (conditions) {\r\n    if (!conditions) {\r\n      this.select()\r\n      conditions = {}\r\n    }\r\n    let {attr, where, join, leftJoin, group, order, having, limit, offset} = conditions\r\n\r\n    if (attr) this.select.apply(this, attr)\r\n    if (where) this.where(where)\r\n    if (join) this.join.apply(this, join)\r\n    if (leftJoin) this.leftJoin.apply(this, leftJoin)\r\n    if (group) this.groupBy(group)\r\n    if (order) this.orderBy(order)\r\n    if (having) this.having(having)\r\n    if (typeof limit !== 'undefined') {\r\n      this.limit(limit, offset)\r\n    }\r\n\r\n    return {\r\n      toString: this.toString.bind(this, arguments),\r\n      exec: this.exec.bind(this, arguments)\r\n    }\r\n  }\r\n\r\n  static findAll (options = {}) {\r\n    if (!options.table) throw new Error('Table name is not defined')\r\n    let opts = {connect: options.connect}\r\n    let table = Builder.table(options.table, opts)\r\n    return table.findAll.call(table, options)\r\n  }\r\n\r\n  findOne () {}\r\n\r\n  toString (isReload) {\r\n    if (this._sql && isReload) return this._sql\r\n\r\n    let sqls = []\r\n    switch (this._type) {\r\n      case 'select':\r\n        sqls = [\r\n          `select ${this._fields} from`,\r\n          this._tableName,\r\n          this._join,\r\n          this._where,\r\n          this._group,\r\n          this._having,\r\n          this._order,\r\n          this._limit\r\n        ]\r\n        break\r\n      case 'insert':\r\n        sqls = [\r\n          `insert into`,\r\n          this._tableName,\r\n          this._insert\r\n        ]\r\n        break\r\n      case 'delete':\r\n        sqls = [\r\n          'delete from',\r\n          this._tableName,\r\n          this._where\r\n        ]\r\n        break\r\n      case 'update':\r\n        sqls = [\r\n          'update',\r\n          this._tableName,\r\n          this._update,\r\n          this._where\r\n        ]\r\n        break\r\n    }\r\n    return sqls.filter(e => !!e).join(' ')\r\n  }\r\n}\r\n"]}