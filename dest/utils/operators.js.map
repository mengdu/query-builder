{"version":3,"sources":["../../src/utils/operators.js"],"names":["operators","$gt","val","escape","$gte","$lt","$lte","$eq","$ne","$between","arr","$notBetween","$in","Array","isArray","Error","map","e","join","$notIn","$like","$notLike"],"mappings":"AAAA;;;;;;AACA;;;;;;AAEA,IAAMA,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,OAAK,aAAUC,GAAV,EAAe;AAClB,kBAAY,oBAAUC,MAAV,CAAiBD,GAAjB,CAAZ;AACD,GAZe;AAahBE,QAAM,cAAUF,GAAV,EAAe;AACnB,mBAAa,oBAAUC,MAAV,CAAiBD,GAAjB,CAAb;AACD,GAfe;AAgBhB;AACAG,OAAK,aAAUH,GAAV,EAAe;AAClB,kBAAY,oBAAUC,MAAV,CAAiBD,GAAjB,CAAZ;AACD,GAnBe;AAoBhBI,QAAM,cAAUJ,GAAV,EAAe;AACnB,mBAAa,oBAAUC,MAAV,CAAiBD,GAAjB,CAAb;AACD,GAtBe;AAuBhBK,OAAK,aAAUL,GAAV,EAAe;AAClB,kBAAY,oBAAUC,MAAV,CAAiBD,GAAjB,CAAZ;AACD,GAzBe;AA0BhB;AACAM,OAAK,aAAUN,GAAV,EAAe;AAClB,mBAAa,oBAAUC,MAAV,CAAiBD,GAAjB,CAAb;AACD,GA7Be;AA8BhBO,YAAU,kBAAUC,GAAV,EAAe;AACvB,wBAAkB,oBAAUP,MAAV,CAAiBO,IAAI,CAAJ,CAAjB,CAAlB,aAAkD,oBAAUP,MAAV,CAAiBO,IAAI,CAAJ,CAAjB,CAAlD;AACD,GAhCe;AAiChBC,eAAa,qBAAUD,GAAV,EAAe;AAC1B,WAAO,SAASV,UAAUS,QAAV,CAAmBC,GAAnB,CAAhB;AACD,GAnCe;AAoChBE,OAAK,aAAUF,GAAV,EAAe;AAClB,QAAI,CAACG,MAAMC,OAAN,CAAcJ,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIK,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,WAAO,SAASL,IAAIM,GAAJ,CAAQ;AAAA,aAAK,oBAAUb,MAAV,CAAiBc,CAAjB,CAAL;AAAA,KAAR,EAAkCC,IAAlC,CAAuC,IAAvC,CAAT,GAAwD,GAA/D;AACD,GAzCe;AA0ChBC,UAAQ,gBAAUT,GAAV,EAAe;AACrB,WAAO,SAASV,UAAUY,GAAV,CAAcF,GAAd,CAAhB;AACD,GA5Ce;AA6ChBU,SAAO,eAAUlB,GAAV,EAAe;AACpB,qBAAe,oBAAUC,MAAV,CAAiBD,GAAjB,CAAf;AACD,GA/Ce;AAgDhBmB,YAAU,kBAAUnB,GAAV,EAAe;AACvB,WAAO,aAAaF,UAAUoB,KAAV,CAAgBlB,GAAhB,CAApB;AACD;AAlDe,CAAlB;;kBAqDeF,S","file":"operators.js","sourcesContent":["'use strict'\r\nimport SqlString from 'sqlstring'\r\n\r\nconst operators = {\r\n  // $and: function (conds) {},\r\n  // $or: function (conds) {\r\n  //   let kvs = []\r\n  //   for (let key in conds) {\r\n  //     kvs.push(`${SqlString.escapeId(key)} = ${SqlString.escape(conds[key])}`)\r\n  //   }\r\n  //   return `or (${kvs.join(', ')})`\r\n  // },\r\n  // >\r\n  $gt: function (val) {\r\n    return `> ${SqlString.escape(val)}`\r\n  },\r\n  $gte: function (val) {\r\n    return `>= ${SqlString.escape(val)}`\r\n  },\r\n  // <\r\n  $lt: function (val) {\r\n    return `< ${SqlString.escape(val)}`\r\n  },\r\n  $lte: function (val) {\r\n    return `<= ${SqlString.escape(val)}`\r\n  },\r\n  $eq: function (val) {\r\n    return `= ${SqlString.escape(val)}`\r\n  },\r\n  // !=\r\n  $ne: function (val) {\r\n    return `!= ${SqlString.escape(val)}`\r\n  },\r\n  $between: function (arr) {\r\n    return `between ${SqlString.escape(arr[0])} and ${SqlString.escape(arr[1])}`\r\n  },\r\n  $notBetween: function (arr) {\r\n    return `not ` + operators.$between(arr)\r\n  },\r\n  $in: function (arr) {\r\n    if (!Array.isArray(arr)) {\r\n      throw new Error('The arguments must be an array')\r\n    }\r\n    return 'in (' + arr.map(e => SqlString.escape(e)).join(', ') + ')'\r\n  },\r\n  $notIn: function (arr) {\r\n    return 'not ' + operators.$in(arr)\r\n  },\r\n  $like: function (val) {\r\n    return `like ${SqlString.escape(val)}`\r\n  },\r\n  $notLike: function (val) {\r\n    return 'not like' + operators.$like(val)\r\n  }\r\n}\r\n\r\nexport default operators\r\n"]}